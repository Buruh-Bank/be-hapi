[33m[nodemon] 2.0.7[39m
[33m[nodemon] to restart at any time, enter `rs`[39m
[33m[nodemon] watching path(s): *.*[39m
[33m[nodemon] watching extensions: js,mjs,json[39m
[32m[nodemon] starting `node server.js -`[39m
-----BEGIN PRIVATE KEY-----
MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDTGendyWPWxcAX
tNOYHqeDjUt/Pd6h96i1xiCqHr1s1dA+I2/DFfky68MLZo+EH2j3Kux0xsb1phny
OoWZNcgLod7wqOyDnojEsCs2lDUHzKLdrwekD5HUyfQINpdpAbnNbIJWIxtj2xCY
/ad+4P2U9oDypr+Gc8gR0AFBZvDqWzVj7LOWMpu0QbD4yxfA81GrVL4EYeB9bRMH
t+mTDIFOwDu9WZwASQmj6ipc660knPxbxQ0U0C9cxWLQzniK/vJCB4yJfHdSo/Ap
0blYjDPoKSEJ1YkO5zU9PbOZnucV5AytjHUDkY9vmUYfyR12Xup7NK8tSc8mjlfj
zDJRuHJpAgMBAAECggEAd0pLd8MYIgO5WywZ7fpUmug7Y3no1woGUkHVr4yTam8g
sByCSXGfUoEbxNN+AiFlxVaCLDMvtxzXyKP9XuifVMNyIfizPmVV0B/lK4BwvymK
V09TOAh8VgyRVBrVUMdi4YyR0m8gSTs/k9Sy0+X8JjNuBrDnxeijhD1QmE69kRBW
QyxyDSf+gnqKy+nvj5h+aQaQHqqui5Wip3xBFOOx5rDldcgLQx3H1nGsdqP2so6T
mkCLIziz27bbo2OYGQuUxt3J0tH93d2TmpxhKKuiC5iI/wc88HwNdl6JVuuUt0e9
e2+a9ED3aL/yVcJ9jwgd3eiVYo3dCxh02PB66SP5IQKBgQD33JaYIoKymfhffcWD
G2jVkPlnmx/QsHY6hMcKB33VPMnxoiIhotMZyiHvlWcmo1+BQXqCupXzwHLFN59o
T3bF8dCyuuSSC2E+wdo1Lec78XtTwVITu1XJWJ9hfk/Z0gRtoxp+J7MWW9Lxs1Lo
YWzvWn9KmMR8H6ClwaiEJ47P5QKBgQDaCFVy8KqB2nLQAUlT0uadjJ1i2GSMC5dB
0tgKE8HVYILOnZPLhkBfK0xrVMCWHB1EZ504DZUAT8853LYKryrlajqwfkjPpJyW
ciDh9n2TazFw0uM9MsSaO2KOgy86l3+kU+P9xbxMr8u6WDdOxbAgKkW++Y9gwzrz
eaEk+wNINQKBgQDe5YioF6DhbIVnmntcg/Gq3UzsVxwtWAN6bJ1x73rBoIEaw2te
REcDEjuicQDqRlFEs9WwaosfQRn1MSgxbgSpzeSYVmnmzEUPYtUQrc8coPT/RQLC
q91hzEjILAczIyLIVb0lZh4vJTR2F4WfZL3KIeAG/Yr09JxLc/RPpCNR4QKBgQCX
CGrYwin65a3etOVssY2a2Ys0q52K/YR7zmhlIqaE/uPd6H423/q7cizvtLfrw/Hq
LrRT3eS3YJG2DVP1Nr5KSTn6hKA/ZlIqTUjF/o+ijQCknRFYlVBnXne5LNqMheGf
nZUzd8QmgyhnHzDA2mRVA7NoxUsyxkqR2lFsYo01eQKBgQCLPLVU9p8H5PR72/o0
kVg/VZ2d5qmgihTac9Hzr7v2wQ3YQeCdWacrMjEg1YtMcY5F/zf2+6v6nGg5ZDLa
qxE+bEEOZPuiZFMpYsN/h5TQpLr/KtWhClm43scU1n1u9BGEIfO+hp5NyZhz5AQQ
nueLd4xGq4sLCI6WPgm4CNf1JQ==
-----END PRIVATE KEY-----

query: START TRANSACTION
query: SELECT * FROM current_schema()
query: SELECT TRUE FROM information_schema.columns WHERE table_name = 'pg_class' and column_name = 'relispartition'
query: SELECT * FROM "information_schema"."tables" WHERE ("table_schema" = 'asu' AND "table_name" = 'user_role')
query: 
            SELECT columns.*,
              pg_catalog.col_description(('"' || table_catalog || '"."' || table_schema || '"."' || table_name || '"')::regclass::oid, ordinal_position) AS description,
              ('"' || "udt_schema" || '"."' || "udt_name" || '"')::"regtype" AS "regtype",
              pg_catalog.format_type("col_attr"."atttypid", "col_attr"."atttypmod") AS "format_type"
              FROM "information_schema"."columns"
              LEFT JOIN "pg_catalog"."pg_attribute" AS "col_attr"
              ON "col_attr"."attname" = "columns"."column_name"
              AND "col_attr"."attrelid" = (
                SELECT
                  "cls"."oid" FROM "pg_catalog"."pg_class" AS "cls"
                  LEFT JOIN "pg_catalog"."pg_namespace" AS "ns"
                  ON "ns"."oid" = "cls"."relnamespace"
                WHERE "cls"."relname" = "columns"."table_name"
                AND "ns"."nspname" = "columns"."table_schema"
              )
            WHERE
            ("table_schema" = 'asu' AND "table_name" = 'user_role')
query: SELECT "ns"."nspname" AS "table_schema", "t"."relname" AS "table_name", "cnst"."conname" AS "constraint_name", pg_get_constraintdef("cnst"."oid") AS "expression", CASE "cnst"."contype" WHEN 'p' THEN 'PRIMARY' WHEN 'u' THEN 'UNIQUE' WHEN 'c' THEN 'CHECK' WHEN 'x' THEN 'EXCLUDE' END AS "constraint_type", "a"."attname" AS "column_name" FROM "pg_constraint" "cnst" INNER JOIN "pg_class" "t" ON "t"."oid" = "cnst"."conrelid" INNER JOIN "pg_namespace" "ns" ON "ns"."oid" = "cnst"."connamespace" LEFT JOIN "pg_attribute" "a" ON "a"."attrelid" = "cnst"."conrelid" AND "a"."attnum" = ANY ("cnst"."conkey") WHERE "t"."relkind" IN ('r', 'p') AND (("ns"."nspname" = 'asu' AND "t"."relname" = 'user_role'))
query: SELECT "ns"."nspname" AS "table_schema", "t"."relname" AS "table_name", "i"."relname" AS "constraint_name", "a"."attname" AS "column_name", CASE "ix"."indisunique" WHEN 't' THEN 'TRUE' ELSE'FALSE' END AS "is_unique", pg_get_expr("ix"."indpred", "ix"."indrelid") AS "condition", "types"."typname" AS "type_name" FROM "pg_class" "t" INNER JOIN "pg_index" "ix" ON "ix"."indrelid" = "t"."oid" INNER JOIN "pg_attribute" "a" ON "a"."attrelid" = "t"."oid"  AND "a"."attnum" = ANY ("ix"."indkey") INNER JOIN "pg_namespace" "ns" ON "ns"."oid" = "t"."relnamespace" INNER JOIN "pg_class" "i" ON "i"."oid" = "ix"."indexrelid" INNER JOIN "pg_type" "types" ON "types"."oid" = "a"."atttypid" LEFT JOIN "pg_constraint" "cnst" ON "cnst"."conname" = "i"."relname" WHERE "t"."relkind" IN ('r', 'p') AND "cnst"."contype" IS NULL AND (("ns"."nspname" = 'asu' AND "t"."relname" = 'user_role'))
query: SELECT "con"."conname" AS "constraint_name", "con"."nspname" AS "table_schema", "con"."relname" AS "table_name", "att2"."attname" AS "column_name", "ns"."nspname" AS "referenced_table_schema", "cl"."relname" AS "referenced_table_name", "att"."attname" AS "referenced_column_name", "con"."confdeltype" AS "on_delete", "con"."confupdtype" AS "on_update", "con"."condeferrable" AS "deferrable", "con"."condeferred" AS "deferred" FROM ( SELECT UNNEST ("con1"."conkey") AS "parent", UNNEST ("con1"."confkey") AS "child", "con1"."confrelid", "con1"."conrelid", "con1"."conname", "con1"."contype", "ns"."nspname", "cl"."relname", "con1"."condeferrable", CASE WHEN "con1"."condeferred" THEN 'INITIALLY DEFERRED' ELSE 'INITIALLY IMMEDIATE' END as condeferred, CASE "con1"."confdeltype" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as "confdeltype", CASE "con1"."confupdtype" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as "confupdtype" FROM "pg_class" "cl" INNER JOIN "pg_namespace" "ns" ON "cl"."relnamespace" = "ns"."oid" INNER JOIN "pg_constraint" "con1" ON "con1"."conrelid" = "cl"."oid" WHERE "con1"."contype" = 'f' AND (("ns"."nspname" = 'asu' AND "cl"."relname" = 'user_role')) ) "con" INNER JOIN "pg_attribute" "att" ON "att"."attrelid" = "con"."confrelid" AND "att"."attnum" = "con"."child" INNER JOIN "pg_class" "cl" ON "cl"."oid" = "con"."confrelid"  AND "cl"."relispartition" = 'f'INNER JOIN "pg_namespace" "ns" ON "cl"."relnamespace" = "ns"."oid" INNER JOIN "pg_attribute" "att2" ON "att2"."attrelid" = "con"."conrelid" AND "att2"."attnum" = "con"."parent"
query: SELECT * FROM "information_schema"."tables" WHERE "table_schema" = 'asu' AND "table_name" = 'typeorm_metadata'
query: COMMENT ON COLUMN "asu"."user_role"."created_at" IS NULL
query: COMMENT ON COLUMN "asu"."user_role"."update_at" IS NULL
query: COMMENT ON COLUMN "asu"."user_role"."delete_at" IS NULL
query: COMMIT
<ref *1> Connection {
  migrations: [],
  subscribers: [],
  entityMetadatas: [
    EntityMetadata {
      childEntityMetadatas: [],
      inheritanceTree: [Array],
      tableType: 'regular',
      withoutRowid: false,
      synchronize: true,
      hasNonNullableRelations: false,
      isJunction: false,
      isClosureJunction: false,
      hasMultiplePrimaryKeys: false,
      hasUUIDGeneratedColumns: true,
      ownColumns: [Array],
      columns: [Array],
      ancestorColumns: [],
      descendantColumns: [],
      nonVirtualColumns: [Array],
      ownerColumns: [],
      inverseColumns: [],
      generatedColumns: [Array],
      primaryColumns: [Array],
      ownRelations: [],
      relations: [],
      eagerRelations: [],
      lazyRelations: [],
      oneToOneRelations: [],
      ownerOneToOneRelations: [],
      oneToManyRelations: [],
      manyToOneRelations: [],
      manyToManyRelations: [],
      ownerManyToManyRelations: [],
      relationsWithJoinColumns: [],
      relationIds: [],
      relationCounts: [],
      foreignKeys: [],
      embeddeds: [],
      allEmbeddeds: [],
      ownIndices: [],
      indices: [],
      uniques: [],
      ownUniques: [],
      checks: [],
      exclusions: [],
      ownListeners: [],
      listeners: [],
      afterLoadListeners: [],
      beforeInsertListeners: [],
      afterInsertListeners: [],
      beforeUpdateListeners: [],
      afterUpdateListeners: [],
      beforeRemoveListeners: [],
      afterRemoveListeners: [],
      connection: [Circular *1],
      inheritancePattern: undefined,
      treeType: undefined,
      treeOptions: undefined,
      parentClosureEntityMetadata: undefined,
      tableMetadataArgs: [Object],
      target: [class Roles],
      expression: undefined,
      engine: undefined,
      database: undefined,
      schema: 'asu',
      givenTableName: 'user_role',
      targetName: 'Roles',
      tableNameWithoutPrefix: 'user_role',
      tableName: 'user_role',
      name: 'Roles',
      tablePath: 'asu.user_role',
      schemaPath: 'asu',
      orderBy: undefined,
      discriminatorValue: 'Roles',
      treeParentRelation: undefined,
      treeChildrenRelation: undefined,
      createDateColumn: undefined,
      updateDateColumn: undefined,
      deleteDateColumn: undefined,
      versionColumn: undefined,
      discriminatorColumn: undefined,
      treeLevelColumn: undefined,
      nestedSetLeftColumn: undefined,
      nestedSetRightColumn: undefined,
      materializedPathColumn: undefined,
      objectIdColumn: undefined,
      propertiesMap: [Object]
    }
  ],
  name: 'default',
  options: {
    type: 'postgres',
    host: 'localhost',
    port: '5432',
    username: 'ilham',
    password: '',
    database: 'asu',
    schema: 'asu',
    synchronize: true,
    logging: true,
    entities: [ [EntitySchema] ]
  },
  logger: AdvancedConsoleLogger { options: true },
  driver: PostgresDriver {
    slaves: [],
    connectedQueryRunners: [],
    isReplicated: false,
    treeSupport: true,
    supportedDataTypes: [
      'int',
      'int2',
      'int4',
      'int8',
      'smallint',
      'integer',
      'bigint',
      'decimal',
      'numeric',
      'real',
      'float',
      'float4',
      'float8',
      'double precision',
      'money',
      'character varying',
      'varchar',
      'character',
      'char',
      'text',
      'citext',
      'hstore',
      'bytea',
      'bit',
      'varbit',
      'bit varying',
      'timetz',
      'timestamptz',
      'timestamp',
      'timestamp without time zone',
      'timestamp with time zone',
      'date',
      'time',
      'time without time zone',
      'time with time zone',
      'interval',
      'bool',
      'boolean',
      'enum',
      'point',
      'line',
      'lseg',
      'box',
      'path',
      'polygon',
      'circle',
      'cidr',
      'inet',
      'macaddr',
      'tsvector',
      'tsquery',
      'uuid',
      'xml',
      'json',
      'jsonb',
      'int4range',
      'int8range',
      'numrange',
      'tsrange',
      'tstzrange',
      'daterange',
      'geometry',
      'geography',
      'cube',
      'ltree'
    ],
    spatialTypes: [ 'geometry', 'geography' ],
    withLengthColumnTypes: [
      'character varying',
      'varchar',
      'character',
      'char',
      'bit',
      'varbit',
      'bit varying'
    ],
    withPrecisionColumnTypes: [
      'numeric',
      'decimal',
      'interval',
      'time without time zone',
      'time with time zone',
      'timestamp without time zone',
      'timestamp with time zone'
    ],
    withScaleColumnTypes: [ 'numeric', 'decimal' ],
    mappedDataTypes: {
      createDate: 'timestamp',
      createDateDefault: 'now()',
      updateDate: 'timestamp',
      updateDateDefault: 'now()',
      deleteDate: 'timestamp',
      deleteDateNullable: true,
      version: 'int4',
      treeLevel: 'int4',
      migrationId: 'int4',
      migrationName: 'varchar',
      migrationTimestamp: 'int8',
      cacheId: 'int4',
      cacheIdentifier: 'varchar',
      cacheTime: 'int8',
      cacheDuration: 'int4',
      cacheQuery: 'text',
      cacheResult: 'text',
      metadataType: 'varchar',
      metadataDatabase: 'varchar',
      metadataSchema: 'varchar',
      metadataTable: 'varchar',
      metadataName: 'varchar',
      metadataValue: 'text'
    },
    dataTypeDefaults: {
      character: [Object],
      bit: [Object],
      interval: [Object],
      'time without time zone': [Object],
      'time with time zone': [Object],
      'timestamp without time zone': [Object],
      'timestamp with time zone': [Object]
    },
    maxAliasLength: 63,
    connection: [Circular *1],
    options: {
      type: 'postgres',
      host: 'localhost',
      port: '5432',
      username: 'ilham',
      password: '',
      database: 'asu',
      schema: 'asu',
      synchronize: true,
      logging: true,
      entities: [Array]
    },
    postgres: PG {
      defaults: [Object],
      Client: [Function],
      Query: [class Query extends EventEmitter],
      Pool: [class BoundPool extends Pool],
      _pools: [],
      Connection: [class Connection extends EventEmitter],
      types: [Object]
    },
    master: BoundPool {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      options: [Object],
      log: [Function (anonymous)],
      Client: [Function],
      Promise: [Function: Promise],
      _clients: [Array],
      _idle: [Array],
      _pendingQueue: [],
      _endCallback: undefined,
      ending: false,
      ended: false,
      [Symbol(kCapture)]: false
    },
    database: 'asu'
  },
  manager: EntityManager {
    repositories: [],
    plainObjectToEntityTransformer: PlainObjectToNewEntityTransformer {},
    connection: [Circular *1]
  },
  namingStrategy: DefaultNamingStrategy {
    nestedSetColumnNames: { left: 'nsleft', right: 'nsright' },
    materializedPathColumnName: 'mpath'
  },
  queryResultCache: undefined,
  relationLoader: RelationLoader { connection: [Circular *1] },
  relationIdLoader: RelationIdLoader { connection: [Circular *1] },
  isConnected: true
}
http://localhost:8080
method  path                        description          
------  --------------------------  ---------------------
GET     /documentation                                   
GET     /help/api/content-category  Help Category        
GET     /status                                          
GET     /swagger.json                                    
GET     /swaggerui/{path*}                               
GET     /swaggerui/extend.js                             
GET     /up                         Status endpoint      
POST    /users/role                 Create Roles Category
GET     /users/roles                Get Roles Category   

1613986190127 info server started at: http://localhost:8080
app lagi jalan cuk
localhost:8080
